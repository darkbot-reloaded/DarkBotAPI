package eu.darkbot.api.managers;

import eu.darkbot.api.API;
import eu.darkbot.api.events.Event;
import eu.darkbot.api.events.Listener;

/**
 * An API made to send and receive events generated by the bot,
 * whenever certain things occur, either in the bot or in-game.
 *
 * To listen in for events, make your class implement {@link Listener}
 * and have one or several methods with an {@link eu.darkbot.api.events.EventHandler}
 * annotation, and a single parameter that is of the type
 * of events you want to listen to.
 *
 * @see Listener
 * @see eu.darkbot.api.events.EventHandler
 * @see Event
 *
 */
public interface EventBrokerAPI extends API.Singleton {

    /**
     * Send an event to all the currently registered events
     * @param object The event to send to all listeners
     */
    void sendEvent(Event object);

    /**
     * Register all the event handler methods in the listener.
     *
     * When this is invoked, all methods in the listener
     * annotated with {@link eu.darkbot.api.events.EventHandler}
     * will be registered to be called whenever an event
     * of that type is sent via {@link #sendEvent(Event)}.
     *
     * The listener will only be weakly referenced, and will be eventually
     * unregistered if there are no other strong references to it.
     *
     * @param listener the listener provided
     */
    void registerListener(Listener listener);

    /**
     * Unregister all the event handler methods in the listener.
     *
     * This is not required if your listener is not referenced
     * anywhere else and receiving events don't directly have an effect.
     * However, if you take action on the bot when receiving events it is still
     * advised that you manually unregister in {@link eu.darkbot.api.extensions.Installable#uninstall}.
     *
     * @param listener the listener to unregister
     */
    void unregisterListener(Listener listener);

}